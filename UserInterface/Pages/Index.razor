@page "/"
@using Model.DTOs
@inject NavigationManager nm
@inject ILoginService auth
@using System.Text.Json
@using System.Text
@using Model.Models
@using UserInterface.Data.Authentication

<PageTitle>Log in</PageTitle>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AirTime.pk Login</title>
</head>
<body>
<div class="login-container">
    <h2>Login to AirTime.pk</h2>
    <EditForm Model="@authDto" OnValidSubmit="Login">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="username">Username Or Email:</label>
            <input type="text" id="username" name="username or email" placeholder="Username or Email" @bind="authDto.UsernameOrEmail" required>
            <ValidationMessage For="@(() => authDto.UsernameOrEmail)"/>
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" placeholder="Password" @bind="authDto.Password" required>
            <ValidationMessage For="@(() => authDto.Password)"/>
        </div>
        <div class="btn-container">
            <button type="submit" >Login</button>
            <button class="signup-button" type="submit" onclick="window.location.href='/register'" >Sign Up</button>
        </div>
          @if (!string.IsNullOrWhiteSpace(error))
            {
                <div class="alert alert-danger">
                    @error
                </div>
            }
    </EditForm>
    <div class="forgot-password">
        <a href="#">Forgot Password?</a>
    </div>
</div>
</body>
</html>

@code
{
    private AuthDto authDto = new();
    private string apiUrl = "http://localhost:5004/api/login";
    private EditContext? editContext;
    private string error = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        editContext = new EditContext(authDto);
    }


    private async Task Login()
    {
        string jsonContent = JsonSerializer.Serialize(authDto);
        StringContent content = new(jsonContent, Encoding.UTF8, "application/json");
        using var httpClient = new HttpClient();
        var response = await httpClient.PostAsync(apiUrl, content);

        if (response.IsSuccessStatusCode)
        {
            
            UserSession responseContent = await response.Content.ReadFromJsonAsync<UserSession>();
            Console.WriteLine("POST request was successful. Response: " + responseContent);
            
            
            await auth.Login(responseContent);
            
            nm.NavigateTo("/home", true);
        }
        else
        {
            Console.WriteLine("POST request failed. Status Code: " + response.StatusCode);
            string responseContent = await response.Content.ReadAsStringAsync();
            error = responseContent;

        }
    }
}

@page "/writeblog"
@using UserInterface.Pages.ReusableComponents
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Model.Models
@using System.Text.Json
@using Model.DTOs
@using System.Text
@layout MainLayout
@inject HttpClient http
@inject ProtectedSessionStorage Session
@inject NavigationManager nm
<PageTitle>Write Blog</PageTitle>
<Navbar/>

@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment e
@if (EditorEnabled)
{
    <html>
    <head>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
        <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
        
        
    </head>
    <body>
        <div class="input-text">

            <h2>Something in your mind?</h2>
            <h4>Let's Publish it!</h4>
        </div>
        <form>
          <div class="form-group">
            <label for="exampleFormControlFile1">Cover Image</label>
            <input type="image" class="form-control-file" id="exampleFormControlFile1" onchange="oninput" >
          </div>
          </form>
          <form>
          <div class="form-group">
            <label for="formGroupExampleInput">Title</label>
            <input type="text" class="form-control" id="formGroupExampleInput" placeholder="Title Of Post" required @bind="_post.Title">
          </div>
         
          <div class="form-group">
            <label for="formGroupExampleInput">Summary</label>
            <input type="text" class="form-control" id="formGroupExampleInput" placeholder="Summary" required @bind = "_post.MetaDescription">
          </div>
        </form>
        <div/>
    <div class="input-container">
        
        <div class="editor-container">
            <div id="toolbar">
                <!-- Your Quill toolbar code goes here -->
                <div id="toolbar">
                    <span class="ql-formats">
                        <select class="ql-font">
                            <option selected=""></option>
                            <option value="serif"></option>
                            <option value="monospace"></option>
                        </select>
                        <select class="ql-size">
                            <option value="small"></option>
                            <option selected=""></option>
                            <option value="large"></option>
                            <option value="huge"></option>
                        </select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-bold"></button>
                        <button class="ql-italic"></button>
                        <button class="ql-underline"></button>
                        <button class="ql-strike"></button>
                    </span>
                    <span class="ql-formats">
                        <select class="ql-color"></select>
                        <select class="ql-background"></select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                        <button class="ql-indent" value="-1"></button>
                        <button class="ql-indent" value="+1"></button>
                        <select class="ql-align">
                            <option selected=""></option>
                            <option value="center"></option>
                            <option value="right"></option>
                            <option value="justify"></option>
                        </select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-link"></button>
                    </span>
                </div>
            </div>

            <div @ref="@divEditorElement"/>


        </div>
    </div>
    <div class="buttons-container">
        <button class="btn btn-primary publish-button" @onclick="UploadPost">Publish</button>
        <button class="btn btn-secondary discard-button">Discard</button>
    </div>
    </body>

    </html>


    }


    @code
{
    //whther show Nvbar or not
    private bool showNavBar = true;

    //for QUILL JS
    private string strSavedContent = "";
    private ElementReference divEditorElement;
    private string? EditorContent;
    private string? EditorHTMLContent;
    private bool EditorEnabled = true;
    //for user id and username from sessionstorage
    private int userid = -1;
    private string username = string.Empty;
    
    //for creating post
    private PostDto _post = new ();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>(
                "QuillFunctions.createQuill", divEditorElement);
        }

        var userSessionStorageResult = await Session.GetAsync<UserSession>("UserSession");
        UserSession userSession = new();
        if (userSessionStorageResult.Success)
        {
            userSession = userSessionStorageResult.Value;
            userid = userSession.UserId;
            username = userSession.Username;
        }
        else
        {
            Console.WriteLine("Session : 404!");
            nm.NavigateTo("/");
        }
        
    }






    async Task GetText()
    {
        EditorHTMLContent = "";
        EditorContent = await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.getQuillText", divEditorElement);
        _post.Body = EditorContent;
    }

    async Task GetHTML()
    {
        EditorContent = "";
        EditorHTMLContent = await JSRuntime.InvokeAsync<string>(
            "QuillFunctions.getQuillHTML", divEditorElement);
        Console.WriteLine(EditorHTMLContent);
        
    }

            async Task GetEditorContent()
            {
                EditorHTMLContent = "";
                EditorContent = await JSRuntime.InvokeAsync<string>(
                    "QuillFunctions.getQuillContent", divEditorElement);
                Console.WriteLine(EditorContent);
            }


            private async Task UploadPost()
            {
                _post.AuthorId = userid;
                _post.AuthorName = username;

                await GetText();
                string jsoncontent = JsonSerializer.Serialize(_post);
                StringContent content = new(jsoncontent, Encoding.UTF8, "application/json");
                var response = await http.PostAsync("api/post", content);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Post sent successfully");
                    Console.WriteLine(_post.MetaDescription);
                    Console.WriteLine(_post.Body);
                }
                else
                {
                    Console.WriteLine("Post Failed");
                }
            }
            
    }


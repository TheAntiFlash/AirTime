@page "/register"
@using Model.DTOs
@inject NavigationManager nm
@using System.Text.Json
@using System.Text

<PageTitle>Register</PageTitle>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Signup to AirTime.pk</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Vollkorn:700,500">
</head>
<body>
    <div class="form-container">
        <h2>Let's Join</h2>
        <EditForm Model="@regDto" OnValidSubmit="RegisterUser">
        <DataAnnotationsValidator />
            <div class="form-group">
                <label for="firstname">First Name:</label>
                <input type="text" id="firstname" name="firstname" placeholder="First Name" @bind="regDto.FirstName" required>
            </div>
            <div class="form-group">
                <label for="lastname">Last Name:</label>
                <input type="text" id="lastname" name="lastname" placeholder="Last Name" @bind="regDto.LastName" required>
            </div>
            <div class="form-group">
                <label for="username">Username:</label>
                <input type="text" id="username" name="username" placeholder="Username" @bind="regDto.Username" required>
            </div>
            <div>
                <label for="email">Email:</label>
                <input type="email" id="email" name="email" placeholder="Email" @bind="regDto.Email" required>
            </div>
            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" placeholder="Password" @bind="regDto.Password" required>
            </div>
            <div class="form-group">
                <label for="confirmPassword">Confirm Password:</label>
                <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Re-enter your password" @bind="confirmPass"  required>
            </div>
            <div class="btn-container">
                <button type="submit">Sign Up</button>
            </div>

            @if(!string.IsNullOrWhiteSpace(error))
            {
                <div class="alert alert-danger">
                    @error

                </div>
            }
        </EditForm> 
        
        <div class="btn-container">
            <a href="#">Have an Account? Sign in here</a>
        </div>
    </div>
</body>
</html>



@code {
    private UserRegDto regDto = new();
    private string apiUrl = "http://localhost:5004/api/register";
    private EditContext? editContext;
    private string confirmPass = string.Empty;

    //for errors
    private string error = string.Empty;

    //onInit
    protected override void OnInitialized()
    {
        base.OnInitialized();
        editContext = new EditContext(regDto);
    }

    private async Task RegisterUser()
    {
        Console.WriteLine($"${regDto.Username}");
        if (regDto.Password != confirmPass)
        {
            error = "Passwords do not match";
            Console.WriteLine(error);
            return;
        }
        string jsonContent = JsonSerializer.Serialize(regDto);
        StringContent content = new(jsonContent, Encoding.UTF8, "application/json");
        using var httpClient = new HttpClient();
        var response = await httpClient.PostAsync(apiUrl, content);

        if(response.IsSuccessStatusCode)
        {
            string responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine("POST Request was Successful with 200 , RESPONSE: " + responseContent);
            nm.NavigateTo("/otp");
        }
        else
        {
            Console.WriteLine("POST req Failed, Error / Status Code: " + response.StatusCode);
            string responseContent = await response.Content.ReadAsStringAsync();
            error = responseContent;
            Console.WriteLine(error);
        }
    }

}

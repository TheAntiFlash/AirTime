@page "/register"
@using Model.DTOs
@inject NavigationManager nm
@using System.Text.Json
@using System.Text

<PageTitle>Register</PageTitle>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Signup to AirTime.pk</title>
</head>
<body>
<div class="page-header">
    <img class="page-header-airtime-icon img-fluid" src="images/airtime-icon.svg" alt="airtime.pk"/>
    <h1 class="page-header-airtime-title">Airtime.pk</h1>
</div>
<div class="page-body">
    <div class="form-container">
        <h2>Create an account</h2>
        <h3>Know what time it is? Airtime!</h3>
        <EditForm Model="@regDto" OnValidSubmit="RegisterUser">
            <DataAnnotationsValidator/>

            <div class="form-group">
                <input type="text" id="firstname" name="firstname" placeholder="First Name" @bind="regDto.FirstName" required>
            </div>
            <div class="form-group">
                <input type="text" id="lastname" name="lastname" placeholder="Last Name" @bind="regDto.LastName" required>
            </div>
            <div class="form-group">
                <input type="text" id="username" name="username" placeholder="Username" @bind="regDto.Username" required>
            </div>
            <div class="form-group">
                <input type="email" id="email" name="email" placeholder="Email" @bind="regDto.Email" required>
            </div>
            <div class="form-group">
                <input type="password" id="password" name="password" placeholder="Password" @bind="regDto.Password" required>
            </div>
            <div class="form-group">
                <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm Password" @bind="confirmPass" required>
            </div>
            <div class="btn-container">
                <button type="submit">Create Account</button>
            </div>

            @if (!string.IsNullOrWhiteSpace(error))
            {
                <div class="alert alert-danger">
                    @error

                </div>
            }
        </EditForm>

        <div>
            <p class="login-text"> Already have an Account&nbsp; <a class="login-link" href="/">Login here!</a></p>
        </div>
    </div>
    <div class="login-image-and-text">
            <h2>Let's Blog it</h2>
            <img class="img-fluid img-login" src="images/airtime-login-image.svg" alt="airtime-login"/>
        </div>
</div>
</body>
</html>


@code {
    private UserRegDto regDto = new();
    private string apiUrl = "http://localhost:5004/api/register";
    private EditContext? editContext;
    private string confirmPass = string.Empty;

    //for errors
    private string error = string.Empty;

    //onInit
    protected override void OnInitialized()
    {
        base.OnInitialized();
        editContext = new EditContext(regDto);
    }

    private async Task RegisterUser()
    {
        Console.WriteLine($"${regDto.Username}");
        if (regDto.Password != confirmPass)
        {
            error = "Passwords do not match";
            Console.WriteLine(error);
            return;
        }
        string jsonContent = JsonSerializer.Serialize(regDto);
        StringContent content = new(jsonContent, Encoding.UTF8, "application/json");
        using var httpClient = new HttpClient();
        var response = await httpClient.PostAsync(apiUrl, content);

        if (response.IsSuccessStatusCode)
        {
            string responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine("POST Request was Successful with 200 , RESPONSE: " + responseContent);
            nm.NavigateTo("/otp");
        }
        else
        {
            Console.WriteLine("POST req Failed, Error / Status Code: " + response.StatusCode);
            string responseContent = await response.Content.ReadAsStringAsync();
            error = responseContent;
            Console.WriteLine(error);
        }
    }

}
@using Model.DTOs
@inject NavigationManager nm
@inject ILoginService auth
@inject HttpClient httpClient
@using System.Text.Json
@using System.Text
@using Model.Models
@using UserInterface.Data.Authentication

<PageTitle>Log in</PageTitle>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AirTime.pk Login</title>
</head>
<body>
    <div class="page-header">
        <img class="page-header-airtime-icon img-fluid" src="images/airtime-icon.svg" alt="airtime.pk" />
        <h1 class="page-header-airtime-title">Airtime.pk</h1>
    </div>
    <div class="page-body">

        <div class="login-container">
            <h2>Welcome Back!</h2>
            <h3>Login to your account</h3>
            <EditForm Model="@authDto" OnValidSubmit="Login">

                <DataAnnotationsValidator />
                <div class="form-group">
                    <input type="text" id="username" name="username or email" placeholder="Enter Email or Username" @bind="authDto.UsernameOrEmail" required>
                    <ValidationMessage For="@(() => authDto.UsernameOrEmail)" />
                </div>
                <div class="form-group">
                    <input type="password" id="password" name="password" placeholder="Enter Password" @bind="authDto.Password" required>
                    <ValidationMessage For="@(() => authDto.Password)" />
                </div>
                <div class="forgot-password">
                    <a href="#">Forgot Password?</a>
                </div>
                <div class="btn-container">
                    <button class="login-button" type="submit">Login</button>
                    <p class="signup-text"> Don't have an account?&nbsp;<a class="signup-link" href="/register"> Sign up</a></p>
                </div>
                @if (!string.IsNullOrWhiteSpace(error))
                {
                    <div class="alert alert-danger">
                        @error
                    </div>
                }
            </EditForm>
        </div>
        <div class="login-image-and-text">
            <h2>Let's Blog it</h2>
            <img class="img-fluid img-login" src="images/airtime-login-image.svg" alt="airtime-login" />
        </div>
    </div>
</body>
</html>

@code
{
    private AuthDto authDto = new();
    private EditContext? editContext;
    private string error = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        editContext = new EditContext(authDto);
    }


    private async Task Login()
    {
        string jsonContent = JsonSerializer.Serialize(authDto);
        StringContent content = new(jsonContent, Encoding.UTF8, "application/json");
        var response = await httpClient.PostAsync("api/login", content);

        if (response.IsSuccessStatusCode)
        {
            UserSession responseContent = await response.Content.ReadFromJsonAsync<UserSession>();
            Console.WriteLine("POST request was successful. Response: " + responseContent);


            await auth.Login(responseContent);

            nm.NavigateTo("/home", true);
        }
        else
        {
            Console.WriteLine("POST request failed. Status Code: " + response.StatusCode);
            string responseContent = await response.Content.ReadAsStringAsync();
            error = responseContent;
        }
    }
}
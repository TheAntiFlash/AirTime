@page "/home"
@using Model.DTOs
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.IdentityModel.Tokens
@using Model.Models
@inject HttpClient Http;
@inject ProtectedSessionStorage Session;
@inject NavigationManager Nm;
@attribute [Authorize(policy: "RequireAuthenticatedUser")]
@layout MainLayout

<!DOCTYPE html>
<html lang="en">
<Navbar></Navbar>
<head>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <title>HomeCard</title>
</head>
<body>

<div class="header-Details">
    <h2>Learn What's Best</h2>
    <p>
        "Educate & Elevate: Navigating the Path to Enlightenment.”
    </p>
    <hr>
</div>


<div class="home-body">
    <div class="blog-topic">
        <h3>Blog Topics</h3>
        <ul>
            <li>
                <a href="">Artificial Intelligence</a>
            </li>
            <li>
                <a href="">Machine Learning</a>
            </li>
            <li>
                <a href="">Neural Networks</a>
            </li>
            <li>
                <a href="">Hospitality and Tourism</a>
            </li>
            <li>
                <a href="">Engineering</a>
            </li>
        </ul> <!-- blog-topic -->
    </div> <!-- blog-topic -->
    <div class="card-section">
        <div class="tag-line">
            <button type="button" class="btn btn-outline-primary">AI</button>
            <button type="button" class="btn btn-outline-primary">Machine Learning</button>
            <button type="button" class="btn btn-outline-primary">Neural Networks</button>
        </div>
        
        <div class = "space"></div>
        <!-- tag-line -->
        @if (!_posts.IsNullOrEmpty())
        {
            @foreach (var post in _posts)
            {
                <a href=@($"post/{post.Id}")>
                    <div class="card mb-3" style="max-width: 900px;">
                        <div class="row g-0">
                            <div class="col-md-4">
                                <img class="img-fluid rounded-start" alt="..." src="@(post.ImageSrc?.ToString())">
                            </div> <!-- col-md-4 -->
                            <div class="col-md-8">
                                <div class="card-body">
                                    <h5 class="card-title">@(post.Title)</h5>
                                    <p class="card-text">@(post.MetaDescription)</p>
                                    <p class="card-text">
                                        <small class="text-body-secondary">@(post.PostApprovalTime?.ToString("dd-MMMM"))</small>
                                    </p>
                                </div> <!-- card-body -->
                            </div> <!-- col-md-8 -->
                        </div> <!-- row -->
                    </div> <!-- card -->
                </a>
                <!-- action button-->
            }
        }
        else
        {
            <h1>
                No Posts
            </h1>
        }
    </div> <!-- card-section -->
</div>
</body>
</html>


@code {
    private bool showNavbar = true;
    private List<PostDto>? _posts = new();

    protected override async Task OnInitializedAsync()
    {
        var userSessionStorageResult = await Session.GetAsync<UserSession>("UserSession");
        UserSession userSession = new();
        if (userSessionStorageResult.Success)
        {
            userSession = userSessionStorageResult.Value;
        }
        else
        {
            Console.WriteLine("Session not found");
            Nm.NavigateTo("/");
        }

        // Console.WriteLine($"{userSession?.UserId}");
        _posts = await Http.GetFromJsonAsync<List<PostDto>>($"api/post/{0}/{20}??userId={userSession!.UserId}");
        //Console.WriteLine(_posts?.ToString());
        if (_posts != null)
            foreach (var post in _posts)
            {
                post.ImageSrc = (post.ImageSrc.IsNullOrEmpty()) ? "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRebeIoR84C98bpu9PvPTAqFsnpdS4yDr07rQ&usqp=CAU" : post.ImageSrc;
                Console.WriteLine((post.ImageSrc));
            }

        StateHasChanged();
        await base.OnInitializedAsync();
    }

}